https://sqlbolt.com/lesson

SQL Review: Simple SELECT Queries
Review 1 — Tasks

1)List all the Canadian cities and their populations 
SELECT City, Population  
FROM north_american_cities
WHERE Country="Canada";

2)Order all the cities in the United States by their latitude from north to south 

SELECT City
FROM north_american_cities
WHERE Country="United States"
ORDER BY Latitude DESC;

3)List all the cities west of Chicago, ordered from west to east

SELECT City
FROM north_american_cities
WHERE Longitude<-87.629798
ORDER BY Longitude;

4)List the two largest cities in Mexico (by population)

SELECT City
FROM north_american_cities
WHERE Country="Mexico"
ORDER BY Population DESC
limit(2);

5)List the third and fourth largest cities (by population) in the United States and their population

SELECT City, Population
FROM north_american_cities
WHERE Country='United States'
ORDER BY Population DESC
LIMIT 2
OFFSET 2;

SQL Lesson 6: Multi-table queries with JOINs
Exercise 6 — Tasks

1) Find the domestic and international sales for each movie

SELECT Title,Domestic_sales,International_sales
FROM movies
JOIN Boxoffice 
ON    movies.id=Boxoffice.Movie_id;

2)Show the sales numbers for each movie that did better internationally rather than domestically

SELECT *
FROM movies
JOIN Boxoffice 
ON    movies.id=Boxoffice.Movie_id
Where Domestic_sales<International_sales;

3) List all the movies by their ratings in descending order

SELECT *
FROM movies
JOIN Boxoffice 
 ON    movies.id=Boxoffice.Movie_id
 ORDER BY Rating DESC;


SQL Lesson 7: OUTER JOINs
Exercise 7 — Tasks

1)Find the list of all buildings that have employees

SELECT DISTINCT building 
FROM employees;

2)Find the list of all buildings and their capacity

SELECT DISTINCT Building_name, Capacity 
FROM Buildings ;

3)List all buildings and the distinct employee roles in each building (including empty buildings)

SELECT Distinct Building_name,Role
FROM   Buildings
LEFT JOIN Employees 
ON Building_name=Building;

SQL Lesson 8: A short note on NULLs

1)Find the name and role of all employees who have not been assigned to a building

SELECT * FROM employees
WHERE Building IS NULL;

2)Find the names of the buildings that hold no employees

SELECT * FROM Buildings 
LEFT JOIN employees
ON Building_name=Building
WHERE Building IS NULL;

SQL Lesson 9: Queries with expressions
Exercise 9 — Tasks

1)List all movies and their combined sales in millions of dollars

SELECT Title, 
(domestic_sales + international_sales) / 1000000 AS Sales,
FROM movies
JOIN Boxoffice 
ON Id=Movie_id;

2)List all movies and their ratings in percent

SELECT Title, 
Rating*10/100 AS Persent_Raiting
FROM Movies 
JOIN Boxoffice 
ON Id=Movie_id;

3)List all movies that were released on even number years

SELECT *
FROM Movies 
WHERE Year%2=0;

SQL Lesson 10: Queries with aggregates (Pt. 1)
Exercise 10 — Tasks

1)Find the longest time that an employee has been at the studio

SELECT MAX(Years_employed) 
FROM employees;

2)For each role, find the average number of years employed by employees in that role

SELECT Role, AVG(Years_employed) 
FROM employees
GROUP BY Role;

3)Find the total number of employee years worked in each building

SELECT *,SUM(Years_employed) AS Total_Years
FROM employees
GROUP BY Building;

SQL Lesson 11: Queries with aggregates (Pt. 2)

1)Find the number of Artists in the studio (without a HAVING clause)

SELECT COUNT(ROLE) AS Total_Artist
FROM employees
WHERE Role='Artist'
GROUP BY Role;

2)Find the number of Employees of each role in the studio 

SELECT Role,COUNT(ROLE) AS Total_Role
FROM employees
GROUP BY Role;

3)Find the total number of years employed by all Engineers

SELECT SUM(Years_employed) AS Years_Engineer
FROM employees
WHERE Role='Engineer';

SQL Lesson 12: Order of execution of a Query
Exercise 12 — Tasks

1)Find the number of movies each director has directed

SELECT Director,COUNT(Title) AS Total_Titles
FROM movies
GROUP BY Director;

2)Find the total domestic and international sales that can be attributed to each director

SELECT Director,SUM(Domestic_sales)+SUM(International_sales) AS Total_sales
FROM movies
JOIN Boxoffice 
ON Id=Movie_id
GROUP BY Director;

SQL Lesson 13: Inserting rows
Exercise 13 — Tasks

1)Add the studio's new production, Toy Story 4 to the list of movies (you can use any director)
INSERT INTO Movies
(Title,Director,Year,Length_minutes)
VALUES ("Toy Story 4","John Lasseter",2000,100)

2)Toy Story 4 has been released to critical acclaim! It had a rating of 8.7, and made 340 million domestically and 270 million internationally. Add the record to the BoxOffice table.

INSERT INTO Movies
(Title,Director,Year,Length_minutes)
VALUES (15,8.7,340000000,270000000)

SQL Lesson 14: Updating rows
Exercise 14 — Tasks

1)The director for A Bug's Life is incorrect, it was actually directed by John Lasseter

Update Movies
SET Director="John Lasseter"
WHERE Title="A Bug's Life";

2)The year that Toy Story 2 was released is incorrect, it was actually released in 1999

UPDATE Movies
SET Year=1999
WHERE Title="Toy Story 2";

3)Both the title and director for Toy Story 8 is incorrect! The title should be "Toy Story 3" and it was directed by Lee Unkrich

UPDATE Movies
SET Title="Toy Story 3",Director="Lee Unkrich"
WHERE Title="Toy Story 8";

SQL Lesson 15: Deleting rows
Exercise 15 — Tasks

1)This database is getting too big, lets remove all movies that were released before 2005.

DELETE FROM Movies
WHERE Year<2005;

2)Andrew Stanton has also left the studio, so please remove all movies directed by him.

DELETE FROM Movies
WHERE Director="Andrew Stanton";

SQL Lesson 16: Creating tables
Exercise 16 — Tasks

Create a new table named Database with the following columns:
– Name A string (text) describing the name of the database
– Version A number (floating point) of the latest version of this database
– Download_count An integer count of the number of times this database was downloaded
This table has no constraints.

CREATE TABLE Database (
Name TEXT,
Version FLOAT,
Download_count INTEGER
);

SQL Lesson 17: Altering tables
Exercise 17 — Tasks

1)Add a column named Aspect_ratio with a FLOAT data type to store the aspect-ratio each movie was released in.

ALTER TABLE movies
ADD Aspect_ratio FLOAT;

2)Add another column named Language with a TEXT data type to store the language that the movie was released in. Ensure that the default for this language is English

ALTER TABLE movies
ADD Language  TEXT
DEFAULT English;

SQL Lesson 18: Dropping tables
Exercise 18 — Tasks

1)We've sadly reached the end of our lessons, lets clean up by removing the Movies table

DROP TABLE Movies;

2)And drop the BoxOffice table as well

DROP TABLE BoxOffice ;